// <auto-generated />
using System;
using DentalNUB.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DentalNUB.Api.Data.Migrations
{
    [DbContext(typeof(DentalNUBDbContext))]
    [Migration("20250425191738_Finalycreations")]
    partial class Finalycreations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DentalNUB.Api.Entities.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<string>("AdEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdPassword")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AdPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminID");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Answer", b =>
                {
                    b.Property<int>("AnsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnsID"));

                    b.Property<string>("AnsText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestID")
                        .HasColumnType("int");

                    b.HasKey("AnsID");

                    b.HasIndex("QuestID")
                        .IsUnique();

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointID"));

                    b.Property<DateTime>("AppointDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClinicType")
                        .HasColumnType("int");

                    b.Property<string>("Complaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ConsID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("QueueNumber")
                        .HasColumnType("int");

                    b.Property<string>("XRayImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointID");

                    b.HasIndex("ConsID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.ChatMessage", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<int>("ToolID")
                        .HasColumnType("int");

                    b.HasKey("MessageID");

                    b.HasIndex("DoctorID");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.ChatNUB", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("LogID");

                    b.HasIndex("PatientID");

                    b.ToTable("ChatNUBs");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Clinic", b =>
                {
                    b.Property<int>("ClinicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicID"));

                    b.Property<int?>("AllowedYear")
                        .HasColumnType("int");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MaxStudent")
                        .HasColumnType("int");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClinicID");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.ClinicSection", b =>
                {
                    b.Property<int>("SectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionID"));

                    b.Property<int>("ClinicID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorYear")
                        .HasColumnType("int");

                    b.Property<int>("MaxStudents")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionID");

                    b.HasIndex("ClinicID");

                    b.ToTable("clinicSections");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Consultant", b =>
                {
                    b.Property<int>("ConsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsID"));

                    b.Property<int>("ClinicType")
                        .HasColumnType("int");

                    b.Property<string>("ConsEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConsPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ConsID");

                    b.HasIndex("ConsEmail")
                        .IsUnique()
                        .HasFilter("[ConsEmail] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"));

                    b.Property<int?>("ClinicID")
                        .HasColumnType("int");

                    b.Property<string>("DoctorEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DoctorPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DoctorYear")
                        .HasColumnType("int");

                    b.Property<int>("SectionID")
                        .HasColumnType("int");

                    b.Property<int?>("SectionOrder")
                        .HasColumnType("int");

                    b.Property<int>("UniversityID")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DoctorID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("DoctorEmail")
                        .IsUnique();

                    b.HasIndex("DoctorPhone")
                        .IsUnique();

                    b.HasIndex("SectionID");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.DoctorSectionRanking", b =>
                {
                    b.Property<int>("RankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RankID"));

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("OrderInSection")
                        .HasColumnType("int");

                    b.Property<int>("SectionNumber")
                        .HasColumnType("int");

                    b.HasKey("RankID");

                    b.HasIndex("DoctorID");

                    b.ToTable("DoctorSectionRankings");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("NotificationID");

                    b.HasIndex("PatientID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.PasswordResetCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PasswordResetCodes");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ChronicalDiseases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CigarettesPerDay")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TeethBrushingFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PatientID");

                    b.HasIndex("PatPhone")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.PatientCase", b =>
                {
                    b.Property<int>("CaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseID"));

                    b.Property<string>("CaseStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ClinicID")
                        .HasColumnType("int");

                    b.Property<int?>("ConsID")
                        .HasColumnType("int");

                    b.Property<int>("DiagnoseID")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("CaseID");

                    b.HasIndex("ClinicID");

                    b.HasIndex("ConsID");

                    b.HasIndex("DiagnoseID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Case");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Question", b =>
                {
                    b.Property<int>("QuestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestID"));

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("QuesText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestID");

                    b.HasIndex("PatientID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.ToolPost", b =>
                {
                    b.Property<int>("ToolPostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToolPostID"));

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToolPostID");

                    b.HasIndex("DoctorID");

                    b.ToTable("ToolPosts");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Diagnose", b =>
                {
                    b.Property<int>("DiagnoseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnoseID"));

                    b.Property<int>("AppointID")
                        .HasColumnType("int");

                    b.Property<string>("AssignedClinic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ClinicID")
                        .HasColumnType("int");

                    b.Property<int>("ConsID")
                        .HasColumnType("int");

                    b.Property<string>("FinalDiagnose")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("DiagnoseID");

                    b.HasIndex("AppointID")
                        .IsUnique();

                    b.HasIndex("ClinicID");

                    b.HasIndex("ConsID");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Admin", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("DentalNUB.Api.Entities.Admin", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Answer", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Question", "Question")
                        .WithOne("Answer")
                        .HasForeignKey("DentalNUB.Api.Entities.Answer", "QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Appointment", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Consultant", "Consultant")
                        .WithMany("Appointments")
                        .HasForeignKey("ConsID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DentalNUB.Api.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.ChatMessage", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Doctor", "Doctor")
                        .WithMany("ChatMessages")
                        .HasForeignKey("DoctorID");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.ChatNUB", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Patient", "Patient")
                        .WithMany("ChatNUB")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.ClinicSection", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Clinic", "Clinic")
                        .WithMany("ClinicSections")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Consultant", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.User", "User")
                        .WithOne("Consultant")
                        .HasForeignKey("DentalNUB.Api.Entities.Consultant", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Doctor", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicID");

                    b.HasOne("DentalNUB.Api.Entities.ClinicSection", "ClinicSection")
                        .WithMany("Doctors")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalNUB.Api.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("DentalNUB.Api.Entities.Doctor", "UserId");

                    b.Navigation("Clinic");

                    b.Navigation("ClinicSection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.DoctorSectionRanking", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Notification", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Patient", "Patient")
                        .WithMany("Notification")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Patient", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("DentalNUB.Api.Entities.Patient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.PatientCase", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Clinic", "Clinic")
                        .WithMany("PatientCases")
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalNUB.Api.Entities.Consultant", "Consultant")
                        .WithMany("PatientCases")
                        .HasForeignKey("ConsID");

                    b.HasOne("Diagnose", "Diagnose")
                        .WithMany("Cases")
                        .HasForeignKey("DiagnoseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DentalNUB.Api.Entities.Doctor", "Doctor")
                        .WithMany("Patientcases")
                        .HasForeignKey("DoctorID");

                    b.HasOne("DentalNUB.Api.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Consultant");

                    b.Navigation("Diagnose");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Question", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Patient", "Patient")
                        .WithMany("Questions")
                        .HasForeignKey("PatientID");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.ToolPost", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Doctor", "Doctor")
                        .WithMany("ToolPost")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Diagnose", b =>
                {
                    b.HasOne("DentalNUB.Api.Entities.Appointment", "appointment")
                        .WithOne("Diagnose")
                        .HasForeignKey("Diagnose", "AppointID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalNUB.Api.Entities.Clinic", "clinic")
                        .WithMany()
                        .HasForeignKey("ClinicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DentalNUB.Api.Entities.Consultant", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("appointment");

                    b.Navigation("clinic");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Appointment", b =>
                {
                    b.Navigation("Diagnose");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Clinic", b =>
                {
                    b.Navigation("ClinicSections");

                    b.Navigation("Doctors");

                    b.Navigation("PatientCases");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.ClinicSection", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Consultant", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("PatientCases");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Doctor", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Patientcases");

                    b.Navigation("ToolPost");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ChatNUB");

                    b.Navigation("Notification");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.Question", b =>
                {
                    b.Navigation("Answer");
                });

            modelBuilder.Entity("DentalNUB.Api.Entities.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Consultant");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Diagnose", b =>
                {
                    b.Navigation("Cases");
                });
#pragma warning restore 612, 618
        }
    }
}
